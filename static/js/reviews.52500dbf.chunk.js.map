{"version":3,"sources":["views/Reviews.jsx"],"names":["Reviews","movieId","useParams","useState","reviews","setReviews","useEffect","apiFilms","then","rev","console","log","length","className","map","review","author","content","id"],"mappings":"iOAIe,SAASA,IACtB,IAAQC,EAAYC,cAAZD,QACR,EAA8BE,mBAAS,IAAvC,mBAAOC,EAAP,KAAgBC,EAAhB,KAUA,OARAC,qBAAU,WACHL,GAGLM,IAAuBN,GAASO,MAAK,SAAAC,GAAG,OAAIJ,EAAWI,QACtD,CAACR,IAEJS,QAAQC,IAAIP,GACJ,mCACLA,EAAQQ,OAAS,EAAK,oBAAIC,UAAU,OAAd,SAClBT,EAAQU,KAAK,SAAAC,GAAY,OACtB,+BACA,8BAAG,uCAAH,IAAkBA,EAAOC,UACzB,4BAAID,EAAOE,YAFFF,EAAOG,SAKf","file":"static/js/reviews.52500dbf.chunk.js","sourcesContent":["import { useState, useEffect } from 'react';\r\nimport { useParams } from 'react-router';\r\nimport * as apiFilms from '../service/apiMovies';\r\n\r\nexport default function Reviews() {\r\n  const { movieId } = useParams();\r\n  const [reviews, setReviews] = useState([]);\r\n\r\n  useEffect(() => {\r\n    if (!movieId) {\r\n      return;\r\n    }\r\n    apiFilms.MoviesReviews(movieId).then(rev => setReviews(rev));\r\n  }, [movieId]);\r\n\r\n  console.log(reviews)\r\n  return (<>\r\n    {reviews.length > 0 ? (<ul className=\"List\">\r\n        {reviews.map( review => { return(\r\n            <li key={review.id}>\r\n            <p><b>Author</b> {review.author}</p>\r\n            <p>{review.content}</p>\r\n            </li>\r\n        )})}\r\n    </ul>): (<p>Nothing was found for your query</p>) }\r\n  </>);\r\n}\r\n"],"sourceRoot":""}